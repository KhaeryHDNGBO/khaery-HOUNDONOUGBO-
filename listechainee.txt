#include <stdlib.h>
struct node{
int val;
struct node *next;
};

struct node *init_node(void);
struct node *addHead(struct node *head);
void addTail(struct node *head);
void display_list(struct node *head);

int main(int argc, char *argv[])
{
struct node *head;
head = init_node();
return 0;

}

struct node *init_node(void)
{
struct node * n = (struct node*)malloc(sizeof(­struct node));
n->val = -1;
return n;
}
struct node*addHaed (struct node*head)
{
struct node *newNode = malloc(sizeof(struct node));
    newNode->data = val;
    
newNode->next     = NULL;

    //if head is NULL, it is an empty list
    if(*head == NULL)
         *head = newNode;
    //Otherwise, find the last node and add the newNode
    else
    {
        struct node *lastNode = *head;

        //last node's next address will be NULL.
        while(lastNode->next != NULL)
        {
            lastNode = lastNode->next;
        }

        //add the newNode at the end of the linked list
        lastNode->next = newNode;

    }
}
void display_list (struct node*head)
{
for (struct node*p = head; p->=NULL;  p= p->next)
        {
         printf ("->%d"; p->val);
        }
printf ("\n");
}
void addTail(struct node *head);
{
If (head ->val == -1)
     {
    head -> val==val;
    }
else
{
struct node*p = new_node (val)
p->next== NULL;
while (head != NULL)
{
head = head -> next
}
head -> next = p;
return head;
}

